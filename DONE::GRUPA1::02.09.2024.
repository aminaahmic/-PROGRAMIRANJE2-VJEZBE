#include <iostream>
#include<vector>
#include<regex>
#include<thread>
#include<mutex>
using namespace std;
const char* crt = "\n-------------------------------------------\n";
enum Drzava { ENGLESKA, SPANIJA, HOLANDIJA, FRANCUSKA, BOSNA_I_HERCEGOVINA };
ostream& operator<< (ostream& COUT, const Drzava& obj) {
	const char* n[] = { "ENGLESKA", "SPANIJA", "HOLANDIJA", "FRANCUSKA", "BOSNA_I_HERCEGOVINA" };
	COUT << n[obj];
	return COUT;
}



char* GetNizKaraktera(const char* sadrzaj, bool dealociraj = false) {
	if (sadrzaj == nullptr)return nullptr;
	int vel = strlen(sadrzaj) + 1;
	char* temp = new char[vel];
	strcpy_s(temp, vel, sadrzaj);
	if (dealociraj)
		delete[]sadrzaj;
	return temp;
}
template<class T1, class T2, int max>
class Kolekcija {
	T1 _elementi1[max];
	T2 _elementi2[max];
	int* _trenutno;
public:
	Kolekcija() {
		_trenutno = new int(0);
	}
	Kolekcija(const Kolekcija& obj) {
		_trenutno = new int(*obj._trenutno);
		for (int i = 0; i < *obj._trenutno; i++)
		{
			_elementi1[i] = obj._elementi1[i];
			_elementi2[i] = obj._elementi2[i];
		}
	}
	Kolekcija& operator=(const Kolekcija& obj) {
		if (this != &obj) {
			delete _trenutno; _trenutno = nullptr;
			_trenutno = new int(*obj._trenutno);
			for (int i = 0; i < *obj._trenutno; i++)
			{
				_elementi1[i] = obj._elementi1[i];
				_elementi2[i] = obj._elementi2[i];
			}
		}return *this;
	}
	~Kolekcija() {
		delete _trenutno; _trenutno = nullptr;
	}
	T1& getElement1(int lokacija) { return _elementi1[lokacija]; }
	T2& getElement2(int lokacija) { return _elementi2[lokacija]; }
	int getTrenutno() const { return *_trenutno; }
	friend ostream& operator<< (ostream& COUT, Kolekcija& obj) {
		for (size_t i = 0; i < *obj._trenutno; i++)
			COUT << obj.getElement1(i) << " " << obj.getElement2(i) << endl;
		return COUT;
	}

	void AddElement(T1 t1, T2 t2) {
		_elementi1[*_trenutno] = t1;
		_elementi2[*_trenutno] = t2;
		(*_trenutno)++;
	}

	Kolekcija<T1, T2, 10> InsertAt(T1 t1, T2 t2, int lokacija) {
		for (int i = *_trenutno; i > lokacija; i--)
		{
			_elementi1[i] = _elementi1[i - 1];
			_elementi2[i] = _elementi2[i - 1];
		}
		_elementi1[lokacija] = t1;
		_elementi2[lokacija] = t2;
		(*_trenutno)++;
		return *this;
	}
	Kolekcija<T1, T2, 10> RemoveRange(int from, int to) {
		Kolekcija < T1, T2, 10> nova;
		if (from < 0 || to < 0 || from >= to || to >= *_trenutno || from >= *_trenutno)
			throw exception("Opseg ne postoji\n");
		else {
			for (int i = from; i <= to; i++)
			{
				nova.AddElement(_elementi1[from], _elementi2[from]);
				for (int j = from; j < *_trenutno; j++)
				{
					_elementi1[j] = _elementi1[j + 1];
					_elementi2[j] = _elementi2[j + 1];
				}
				(*_trenutno)--;
			}
		}
		return nova;
	}
};
class Vrijeme {
	int* _sat, * _minuta, * _sekunda;
public:
	Vrijeme(int sat = 10, int minuta = 0, int sekunda = 0) {
		_sat = new int(sat);
		_minuta = new int(minuta);
		_sekunda = new int(sekunda);
	}
	Vrijeme(const Vrijeme& obj) {
		_sat = new int(*obj._sat);
		_minuta = new int(*obj._minuta);
		_sekunda = new int(*obj._sekunda);
	}
	Vrijeme& operator=(const Vrijeme& obj) {
		if (this != &obj) {
			delete _sat; _sat = nullptr;
			delete _minuta; _minuta = nullptr;
			delete _sekunda; _sekunda = nullptr;
			_sat = new int(*obj._sat);
			_minuta = new int(*obj._minuta);
			_sekunda = new int(*obj._sekunda);
		} return *this;
	}
	~Vrijeme() {
		delete _sat; _sat = nullptr;
		delete _minuta; _minuta = nullptr;
		delete _sekunda; _sekunda = nullptr;
	}
	friend ostream& operator<< (ostream& COUT, const Vrijeme& obj) {
		COUT << *obj._sat << ":" << *obj._minuta << ":" << *obj._sekunda;
		return COUT;
	}
	int uSekunde()const {
		return *_sekunda + *_minuta * 60 + *_sat * 3600;
	}
};

bool operator==(const Vrijeme& o, const Vrijeme& o1) {
	return (o.uSekunde() == o1.uSekunde());
}
bool operator!=(const Vrijeme& o, const Vrijeme& o1) {
	return !(o == o1);
}
bool operator<(const Vrijeme& o, const Vrijeme& o1) {
	return (o.uSekunde() < o1.uSekunde());
}
bool operator>(const Vrijeme& o, const Vrijeme& o1) {
	return (o.uSekunde() > o1.uSekunde());
}
int razlikasati(const Vrijeme& o, const Vrijeme& o1) {
	return abs(o.uSekunde() - o1.uSekunde());
}
class Pogodak {
	Vrijeme* _vrijemePogotka;
	char* _napomena;
public:
	Pogodak(Vrijeme vrijeme, const char* napomena) {
		_napomena = GetNizKaraktera(napomena);
		_vrijemePogotka = new Vrijeme(vrijeme);
	}

	Pogodak(const Pogodak& obj) {
		_napomena = GetNizKaraktera(obj._napomena);
		_vrijemePogotka = new Vrijeme(*obj._vrijemePogotka);
	}
	Pogodak& operator=(const Pogodak& obj) {
		if (this != &obj) {
			delete[] _napomena; _napomena = nullptr;
			delete _vrijemePogotka; _vrijemePogotka = nullptr;
			_napomena = GetNizKaraktera(obj._napomena);
			_vrijemePogotka = new Vrijeme(*obj._vrijemePogotka);
		}return *this;
	}
	~Pogodak() {
		delete[] _napomena; _napomena = nullptr;
		delete _vrijemePogotka; _vrijemePogotka = nullptr;
	}
	Vrijeme GetVrijemePogotka() { return *_vrijemePogotka; }
	char* GetNapomena() { return _napomena; }
	friend ostream& operator<< (ostream& COUT, const Pogodak& obj) {
		COUT << *obj._vrijemePogotka << " -> " << obj._napomena;
		return COUT;
	}

};

bool ValidirajID(string id) {
	return regex_match(id, regex("([A-Z]{2}[1-9]{4}|[A-Z]0[A-Z][1-9]{3}|[A-Z]00[A-Z][1-9]{2}|[A-Z]000[A-Z][1-9]{1})"));
}
int obrniGa(int broj) {
	int noviBroj = 0;
	while (broj > 0) {
		noviBroj *= 10;
		noviBroj += broj % 10;
		broj /= 10;
	}
	return noviBroj;
}
string GenerisiID(const char* ime, int broj) {
	char prvoSlovo = (char)toupper(ime[0]);
	string id;
	id += prvoSlovo;
	int brojac = log10(broj) + 1;
	int brojNula = max(0, 4 - brojac);
	string nule(brojNula, '0');
	id += nule;
	for (int i = 0; i < strlen(ime); i++)
	{
		if (ime[i] == ' ') {
			char drugoSlovo = (char)toupper(ime[i + 1]);
			return id + drugoSlovo + to_string(obrniGa(broj));
		}
	}


}
class Igrac {
	static int _id;
	char* _ID;
	// za inicijalizaciju _ID-a iskoristiti funkciju	GenerisiID tj.atributa _imePrezime(inicijala imena i prezimena) i	
	// statickog clana _id
	char* _imePrezime;
	vector<Pogodak*> _pogoci;
public:
	Igrac(const char* imePrezime) :_ID(GetNizKaraktera(GenerisiID(imePrezime, _id++).c_str())) {
		_imePrezime = GetNizKaraktera(imePrezime);
	}
	Igrac(const Igrac& obj) {
		_imePrezime = GetNizKaraktera(obj._imePrezime);
		_ID = GetNizKaraktera(obj._ID);
		for (int i = 0; i < obj._pogoci.size(); i++)
		{
			_pogoci.push_back(new Pogodak(*obj._pogoci[i]));
		}
	}
	Igrac& operator=(const Igrac& obj) {
		if (this != &obj) {
			delete[]_ID; _ID = nullptr;
			delete[]_imePrezime; _imePrezime = nullptr;
			for (size_t i = 0; i < _pogoci.size(); i++) {
				delete _pogoci[i];
				_pogoci[i] = nullptr;
			}
			_pogoci.clear();
			_imePrezime = GetNizKaraktera(obj._imePrezime);
			_ID = GetNizKaraktera(obj._ID);
			for (int i = 0; i < obj._pogoci.size(); i++)
			{
				_pogoci.push_back(new Pogodak(*obj._pogoci[i]));
			}
		}return *this;
	}
	~Igrac() {
		delete[]_ID; _ID = nullptr;
		delete[]_imePrezime; _imePrezime = nullptr;
		for (size_t i = 0; i < _pogoci.size(); i++) {
			delete _pogoci[i];
			_pogoci[i] = nullptr;
		}
	}
	const char* GetImePrezime() const { return _imePrezime; }
	const char* GetID() const { return _ID; }
	vector<Pogodak*>& GetPogoci() { return _pogoci; }
	friend ostream& operator<< (ostream& COUT, Igrac& obj) {
		COUT << obj._ID << " -> " << obj._imePrezime;
		for (size_t i = 0; i < obj._pogoci.size(); i++)
			cout << *obj._pogoci[i] << endl;
		return COUT;
	}
	bool operator==(const Igrac& obj) {
		if (strcmp(_ID, obj._ID) != 0)
			return false;
		if (strcmp(_imePrezime, obj._imePrezime) != 0)
			return false;
		return true;
	}

};
int Igrac::_id = 1;
class Reprezentacija {
	Drzava _drzava;
	vector<Igrac> _igraci;
public:
	Reprezentacija(Drzava drzava = BOSNA_I_HERCEGOVINA) {
		_drzava = drzava;
	}
	Reprezentacija(const Reprezentacija& obj) {
		_drzava = obj._drzava;
		_igraci = obj._igraci;
	}
	Reprezentacija& operator=(const Reprezentacija& obj) {
		if (this != &obj) {
			_drzava = obj._drzava;
			_igraci = obj._igraci;
		}return *this;
	}
	~Reprezentacija() {}
	Drzava GetDrzava() { return _drzava; }
	vector<Igrac>& GetIgraci() { return _igraci; }
	friend ostream& operator<< (ostream& COUT, Reprezentacija& obj) {
		COUT << "Drzava-> " << obj.GetDrzava() << endl;
		for (int i = 0; i < obj._igraci.size(); i++)
		{
			COUT << obj._igraci[i] << "\n";
		}
		return COUT;
	}

	void AddIgrac(Igrac igrac) {
		for (int i = 0; i < _igraci.size(); i++)
		{
			if (igrac == _igraci[i])
				throw exception("Ovaj igrac je vec dodan u repkuuu :(\n");
		}
		_igraci.push_back(igrac);
	}
	int brojGolova() {
		int u = 0;
		for (int i = 0; i < _igraci.size(); i++)
		{
			u += _igraci[i].GetPogoci().size();
		}
		return u;
	}
};
class Prventstvo {
	Kolekcija<Reprezentacija, Reprezentacija, 20> _utakmice;
public:
	Prventstvo() {}
	Prventstvo(const Prventstvo& obj) {
		_utakmice = obj._utakmice;
	}
	Prventstvo& operator=(const Prventstvo& obj) {
		if (this != &obj) {
			_utakmice = obj._utakmice;
		}return *this;
	}
	~Prventstvo() {}
	Kolekcija<Reprezentacija, Reprezentacija, 20>& GetUtakmice() {
		return _utakmice;
	}

	void AddUtakmicu(Reprezentacija r1, Reprezentacija r2) {
		for (int i = 0; i < _utakmice.getTrenutno(); i++)
		{
			if (r1.GetDrzava() == _utakmice.getElement1(i).GetDrzava() || r2.GetDrzava() == _utakmice.getElement2(i).GetDrzava())
				throw exception("Ovaj susret je vec odigran :(\n");
		}
		_utakmice.AddElement(r1, r2);
	}
	Reprezentacija& cijiJePogodak(Drzava d1, Drzava d2, const char* identifikator, Pogodak p) {
		int index = 0;
		for (int i = 0; i < _utakmice.getTrenutno(); i++)
		{
			if (d1 == _utakmice.getElement1(i).GetDrzava() && d2 == _utakmice.getElement2(i).GetDrzava()) {
				index = i;
			}
			for (int j = 0; j < _utakmice.getElement1(i).GetIgraci().size(); j++)
			{
				if (strcmp(identifikator, _utakmice.getElement1(i).GetIgraci()[j].GetImePrezime()) == 0 ||
					strcmp(identifikator, _utakmice.getElement1(i).GetIgraci()[j].GetID()) == 0) {
					return _utakmice.getElement1(i);
				}
			}
		}
		return _utakmice.getElement2(index);
	}
	bool imaLiIstih(Drzava d1, Drzava d2, const char* identifikator, Pogodak p) {
		Reprezentacija r = cijiJePogodak(d1, d2, identifikator, p);
		for (int i = 0; i < r.GetIgraci().size(); i++)
		{
			if (strcmp(identifikator, r.GetIgraci()[i].GetID()) == 0 ||
				strcmp(identifikator, r.GetIgraci()[i].GetImePrezime()) == 0)
			{
				if (r.GetIgraci()[i].GetPogoci().empty())
					return false;
				for (int j = 0; j < r.GetIgraci()[i].GetPogoci().size(); j++)
				{
					if (p.GetVrijemePogotka().uSekunde() == r.GetIgraci()[i].GetPogoci()[j]->GetVrijemePogotka().uSekunde())
						return true;
				}
			}
		}
		return false;
	}
	bool AddPogodak(Drzava d1, Drzava d2, const char* identifikator, Pogodak p) {
		int index = 0;
		for (int i = 0; i < _utakmice.getTrenutno(); i++)
		{
			if (d1 == _utakmice.getElement1(i).GetDrzava() &&
				d2 == _utakmice.getElement2(i).GetDrzava()) {
				index = i;
				break;
			}
		}
		Reprezentacija& r = cijiJePogodak(d1, d2, identifikator, p);
		if (imaLiIstih(d1, d2, identifikator, p))
			return false;
		else {
			for (int i = 0; i < r.GetIgraci().size(); i++)
			{
				if (strcmp(identifikator, r.GetIgraci()[i].GetImePrezime()) == 0 ||
					strcmp(identifikator, r.GetIgraci()[i].GetID()) == 0) {
					r.GetIgraci()[i].GetPogoci().push_back(new Pogodak(p));
					thread t(&Prventstvo::saljiMail, this, r.GetIgraci()[i], _utakmice.getElement1(index), _utakmice.getElement2(index));
					this_thread::sleep_for(chrono::seconds(2));
					t.join();
					return true;
				}
			}
		}
		return false;
	}

	void saljiMail(Igrac igrac, Reprezentacija r1, Reprezentacija r2) {
		mutex m;
		m.lock();
		cout << "TO: " << igrac.GetID() << "@euro2024.com\n";
		cout << "From: info@euro2024.com\n";
		cout << "Subject:informacija\nPostovani\nU " << igrac.GetPogoci().back()->GetVrijemePogotka() << " sati igrac " << igrac.GetImePrezime();
		cout << " je zabiljezio svoj " << igrac.GetPogoci().size() << " pogodak na ovoj utakmici\nTrenutni rezultat je\n";
		cout << r1.GetDrzava() << " " << r1.brojGolova() << ":" << r2.brojGolova() << " " << r2.GetDrzava() << endl;
		cout << "Puno srece u nastavku susreta.\nNeka bolji tim pobijedi." << crt;
		m.unlock();
	}

	friend ostream& operator<< (ostream& COUT, Prventstvo& obj) {
		COUT << crt;
		for (int i = 0; i < obj._utakmice.getTrenutno(); i++)
		{
			COUT << "(" << obj._utakmice.getElement1(i).brojGolova() << ") " << obj._utakmice.getElement1(i).GetDrzava() << " : ";
			COUT << obj._utakmice.getElement2(i).GetDrzava() << " (" << obj._utakmice.getElement2(i).brojGolova() << ") " << endl;
		}
		COUT << crt;
		for (int i = 0; i < obj._utakmice.getTrenutno(); i++)
		{
			for (int j = 0; j < obj._utakmice.getElement1(i).GetIgraci().size(); j++)
			{
				for (int k = 0; k < obj._utakmice.getElement1(i).GetIgraci()[j].GetPogoci().size(); k++)
				{
					COUT << obj._utakmice.getElement1(i).GetIgraci()[j].GetImePrezime() << endl;
				}
			}
			for (int j = 0; j < obj._utakmice.getElement2(i).GetIgraci().size(); j++)
			{
				for (int k = 0; k < obj._utakmice.getElement2(i).GetIgraci()[j].GetPogoci().size(); k++)
				{
					COUT << obj._utakmice.getElement2(i).GetIgraci()[j].GetImePrezime() << endl;
				}
			}
		}
		COUT << crt;
		return COUT;
	}

		/*enum Drzava { ENGLESKA, SPANIJA, HOLANDIJA, FRANCUSKA, BOSNA_I_HERCEGOVINA };
class Pogodak
	Vrijeme* _vrijemePogotka;
	char* _napomena;
class Igrac {
	static int _id;
	char* _ID;
	char* _imePrezime;
	vector<Pogodak*> _pogoci;
class Reprezentacija {
	Drzava _drzava;
	vector<Igrac> _igraci;
class Prventstvo
	Kolekcija<Reprezentacija, Reprezentacija, 20> _utakmice;*/

	vector<Igrac*> operator()(int brojp) {
		vector<Igrac*> novi;
		for (int i = 0; i <_utakmice.getTrenutno(); i++)
		{
			Reprezentacija& r1 = _utakmice.getElement1(i);
			Reprezentacija& r2 = _utakmice.getElement2(i);
			for (int j = 0; j < r1.GetIgraci().size(); j++)
			{
				if (brojp <= r1.GetIgraci()[j].GetPogoci().size()) {
					novi.push_back(new Igrac(r1.GetIgraci()[j]));
				}
			}
			for (int j = 0; j < r2.GetIgraci().size(); j++)
			{
				if (brojp <= r2.GetIgraci()[j].GetPogoci().size()) {
					novi.push_back(new Igrac(r2.GetIgraci()[j]));
				}
			}
		}
		return novi;
	}
};
const char* GetOdgovorNaPrvoPitanje() {
	cout << "Pitanje -> Pojasnite osnovne preduslove koji moraju biti ispunjeni da bi se realizovao polimorfizam(navesti kratki	primjer) ? \n";
	return "Odgovor -> OVDJE UNESITE VAS ODGOVOR";
}

const char* GetOdgovorNaDrugoPitanje() {
	cout << "Pitanje -> Pojasnite razloge koristenja kljucnih rijeci abstract i ciste virtualne metode, te razlike izmedju njih ? \n";
	return "Odgovor -> OVDJE UNESITE VAS ODGOVOR";
}
void main() {

	cin.get();
	cout << GetOdgovorNaPrvoPitanje() << endl;
	cin.get();
	cout << GetOdgovorNaDrugoPitanje() << endl;
	cin.get();
	/*
	Globalna funkcija GenerisiID vraca ID igraca na osnovu vrijednosti
   proslijedjenih parametara. Funkcija generise
	ID sa maksimalno 4 cifre, ne racunajuci inicijale tj. prva slova
   imena i prezimena.
	Podrazumijeva se da ce uvijek biti proslijedjene validne
   vrijednosti parametara. Ukoliko se proslijede
	mala pocetna slova imena ili prezimena, potrebno ih je
   konvertovati u velika.
	U okviru generisanog ID-a, proslijedjena cjelobrojna vrijednost
   treba biti u obrnutom redoslijedu cifara.
	*/
	cout << GenerisiID("Denis Music", 3) << endl;//treba vratiti D000M3
	cout << GenerisiID("Jasmin Azemovic", 14) << endl;//treba vratiti J00A41
	cout << GenerisiID("Goran Skondric", 156) << endl;//treba vratiti G0S651
	cout << GenerisiID("emina junuz", 1798) << endl;//treba vratiti	EJ8971

	//Za validaciju ID-a koristiti funkciju ValidirajID koja treba,	koristeci regex, osigurati postivanje osnovnih pravila
	//vezanih za format koja su definisana u prethodnom dijelu zadatka.
	if (ValidirajID("D000M3"))
		cout << "ID VALIDAN" << endl;
	if (ValidirajID("J00A41"))

		cout << "ID VALIDAN" << endl;
	if (!ValidirajID("G00S651"))
		cout << "ID NIJE VALIDAN" << endl;
	if (!ValidirajID("Ej8971"))
		cout << "ID NIJE VALIDAN" << endl;
	int kolekcijaTestSize = 9;
	Kolekcija<int, int, 10> kolekcija1;
	for (int i = 0; i < kolekcijaTestSize; i++)
		kolekcija1.AddElement(i, i);//dodaje vrijednosti u kolekciju

	cout << kolekcija1 << crt;
	/* metoda InsertAt treba da doda vrijednosti prvog i drugog
   parametra na lokaciju koja je definisana trecim parametrom. Povratna
   vrijednost metode
	je objekat (pozivaoc metode, u konkretnom slucaju objekat
   kolekcija1) u okviru koga su, na definisanu lokaciju, dodati
   zahtijevani parametri.
	Nakon izvrsenja metode InsertAt, oba objekta, kolekcija1 i
   kolekcija2, bi trebali posjedovati sljedeci sadrzaj:
	10 10
	0 0
	1 1
	2 2
	* ....
	*/
	Kolekcija<int, int, 10> kolekcija2 = kolekcija1.InsertAt(10, 10,
		0);
	cout << kolekcija2 << crt;
	/*Metoda RemoveRange prihvata lokacija OD i DO, te u tom opsegu
   uklanja sve elemente iz kolekcije. U slucaju da zahtijevani opseg ne
   postoji u kolekciji
	metoda treba baciti izuzetak. Na kraju, metoda treba da vrati
   pokazivac na novi objekat tipa kolekcija koji sadrzi samo uklonjene
   elemente*/
	Kolekcija<int, int, 10> kolekcija3 = kolekcija1.RemoveRange(1, 3);
	cout << "Remove\n";
	cout << kolekcija3 << endl;
	cout << kolekcija1 << crt;
	/*kolekcija3 bi trebala sadrzavati sljedece elemente:
	0 0
	1 1
	2 2
	dok bi kolekcija1 trebala sadrzavati sljedece elemente:
	10 10
	3 3
	4 4
	......
	*/
	kolekcija1 = kolekcija3;
	cout << kolekcija1;



	Vrijeme
		prviPogodak201633(20, 16, 33),
		drugiPogodak202319(20, 23, 19),
		treciPogodak205108(20, 51, 8),
		cetvrtiPogodak210654(21, 6, 54);


	Igrac denis("Denis Music"), jasmin("Jasmin Azemovic"), goran("Goran Skondric"), adil("Adil Joldic");
	if (strcmp(denis.GetID(), "D000M1") == 0 && strcmp(jasmin.GetID(), "J000A2") == 0)
		cout << "ID se uspjesno generise!" << endl;



	Pogodak prviPogodak(prviPogodak201633, "podaci o prvom pogotku"),
		drugiPogodak(drugiPogodak202319, "podaci o drugom pogotku"),
		treciPogodak(treciPogodak205108, "podaci o trecem pogotku"),
		cetvrtiPogodak(cetvrtiPogodak210654, "podaci o cetvrtom	pogotku");


	Reprezentacija BIH(BOSNA_I_HERCEGOVINA), ENG(ENGLESKA);
	BIH.AddIgrac(denis);
	BIH.AddIgrac(jasmin);
	ENG.AddIgrac(goran);
	ENG.AddIgrac(adil);
	try
	{
		BIH.AddIgrac(denis);//onemoguciti dodavanje istih igraca - provjeravati ID
	}
	catch (exception& obj)
	{
		cout << obj.what();
	}

	Prventstvo euro2024;
	euro2024.AddUtakmicu(BIH, ENG);
	try
	{
		euro2024.AddUtakmicu(BIH, ENG);//onemoguciti ponovne susrete drzava tokom istog prvenstva
	}
	catch (exception& obj)
	{
		cout << obj.what();
	}
	cout << crt;
	//omoguciti dodavanje pogotka po ID-u ili imenu i prezimenu
	if (euro2024.AddPogodak(BOSNA_I_HERCEGOVINA, ENGLESKA, "D000M1",
		prviPogodak))
		cout << "Pogodak uspjesno dodat" << endl;
	//onemoguciti dodavanje istih pogodaka
	if (!euro2024.AddPogodak(BOSNA_I_HERCEGOVINA, ENGLESKA, "Denis Music", prviPogodak))
		cout << "Pogodak NIJE uspjesno dodat" << endl;
	if (euro2024.AddPogodak(BOSNA_I_HERCEGOVINA, ENGLESKA, "J000A2", drugiPogodak))
		cout << "Pogodak uspjesno dodat" << endl;
	if (euro2024.AddPogodak(BOSNA_I_HERCEGOVINA, ENGLESKA, "Jasmin Azemovic", treciPogodak))
		cout << "Pogodak uspjesno dodat" << endl;
	if (euro2024.AddPogodak(BOSNA_I_HERCEGOVINA, ENGLESKA, "Goran Skondric", cetvrtiPogodak))
		cout << "Pogodak uspjesno dodat" << endl;



	//nakon svakog evidentiranog pogotka, svim igracima te utakmic
	// e	(pod pretpostavkom da su validne email adrese sa ID - ovima igraca),
	//		u zasebnom thread-u, poslati email. u razmaku od 2 sekunde, sa sljedecim sadrzajem :

	/*
	To: D000M1@euro2024.com
	From: info@euro2024.com
	Subject: Informacija
	Postovani,
	U 20:35:16 sati igrac Jasmin Azemovic je zabiljezio svoj 1
   pogodak na ovoj utakmici.
	Trenutni rezultat je:
	BOSNA_I_HERCEGOVINA 2 : 0 ENGLESKA
	Puno srece u nastavku susreta.
	Neka bolji tim pobijedi.
	*/

	//ispisuje detaljnije informacije o susretu, kako je navedeno u	narednom ispisu
	cout << euro2024;
	/*
	-------------------------------------------
	(3) BOSNA_I_HERCEGOVINA : ENGLESKA (1)
	-------------------------------------------
	Denis Music Goran Skondric
	Jasmin Azemovic
	Jasmin Azemovic
	-------------------------------------------
	*/


	//vraca sve igrace koji su na takmicenju postigli broj pogodaka	 koji je veci ili jednak proslijedjenoj vrijednosti
	vector<Igrac*> igraci = euro2024(2);
	for (size_t i = 0; i < igraci.size(); i++)
		cout << igraci[i]->GetImePrezime() << endl;
	cin.get();
	system("pause>0");

}
